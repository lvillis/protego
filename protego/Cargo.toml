[package]
name = "protego"
description = "üõ°Ô∏è Protego is an eBPF-based security tool for Linux designed to enhance system protection."
version = "0.1.0"
edition = "2021"
license = "MIT"

[dependencies]
protego-common = { version = "0.1.0", features = ["user"] }

[patch.crates-io]
protego-common = { path = "../protego-common", features = ["user"] }

anyhow = { version = "1", default-features = false }
aya = { version = "0.13.0", default-features = false }
aya-log = { version = "0.2.1", default-features = false }
env_logger = { version = "0.11.5", default-features = false }
libc = { version = "0.2.159", default-features = false }
log = { version = "0.4.22", default-features = false }
tokio = { version = "1.40.0", features = ["macros", "rt", "rt-multi-thread", "net", "signal"] }

clap = { version = "4.5.20", features = ["derive"] }
[build-dependencies]
cargo_metadata = { version = "0.18.0", default-features = false }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
protego-ebpf = { path = "../protego-ebpf" }

[[bin]]
name = "protego"
path = "src/main.rs"
